module balloondb.queryparse.QueryParser where

import Data.MicroParsec
import Data.Iterators(StringIterator SI)

queryParser = do
  queries <- many query
  return queries

query = selectQuery
    <|> deleteQuery
    <|> insertQuery

selectQuery = do
  (string "SELECT")
  spaces
  dataObjType <- (many letter)
  eoe
  return $ SelectQuery (packed dataObjType)

deleteQuery = do
  (string "DELETE")
  spaces
  dataObjType <- (many letter)
  eoe
  return $ DeleteQuery (packed dataObjType)

insertQuery = do
  (string "INSERT")
  spaces
  dataObjType <- (many letter)
  leftParen
  params <- (literal `sepBy` (charParse ','))
  rightParen
  return $ InsertQuery (packed dataObjType) params

data Literal = CharL [Char] | StringL [Char] | IntL [Char] | LongL [Char]
             | FloatL [Char] | DoubleL [Char] | BoolL [Char]

derive Show Literal

data Query
  = SelectQuery String
  | DeleteQuery String
  | InsertQuery String [Literal]
  | CreateQuery String [Literal]

derive Show Query

charParse c = satisfy(\x -> x == c)

-- end of expression is a semi-colon
eoe = charParse ';'

eol = charParse '\n'

leftParen = charParse '('

rightParen = charParse ')'

anyChar = satisfy (const True)

--literal parsers
literal = char <|> stringLiteral <|> boolean <|> double <|> float <|> long <|> int

boolean = do
  val <-((string "true") <|> (string "false"))
  return $ BoolL (unpacked val)

int = do 
  val <- (many digit)
  return $ IntL val

long = do
  val <- (many digit)
  (charParse 'l')
  return $ LongL (val ++ ['l'])

float = do
  left <- (many digit)
  (charParse '.')
  right <- (many digit)
  return $ FloatL (left ++ ['.'] ++ right)

double = do
  left <- (many digit)
  (charParse '.')
  right <- (many digit)
  (charParse 'd')
  return $ DoubleL (left ++ ['.'] ++ right)

char = do
  charParse '\''
  char <- anyChar
  charParse '\''
  return $ CharL ( '\'' : char : ['\''])

stringLiteral = do
  charParse '\"'
  chars <- many (satisfy (\c -> c != '\"'))
  charParse '\"'
  return $ StringL (['\"'] ++ chars ++  ['\"'])

parseQuery q = parse queryParser (SI.from q)
